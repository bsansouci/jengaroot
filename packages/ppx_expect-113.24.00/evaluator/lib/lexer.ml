# 1 "lexer.mll"
 
  open StdLabels
  open Sexplib.Std
  open Expectation

  let escaped s =
    let unescaped = Scanf.unescaped s in
    if String.contains unescaped '\n'
    then
      failwith "(escaped) strings can't contain escaped newlines";
    Pretty.Line.Literal unescaped

  let%test_unit _ =
    [%test_result: string] (Scanf.unescaped "xx\\n\032yy") ~expect:"xx\n yy"

  let make_line as_string format : Pretty.Line.t = { format; as_string }

  let determine_indent lines (* list of (indent_length, full_line) *) =
    match List.filter lines ~f:((<>) (0, "")) with
    | [] -> ""
    | (n, s) :: l ->
      let indent_len = List.map l ~f:fst |> List.fold_left ~init:n ~f:min in
      let indent = String.sub s ~pos:0 ~len:indent_len in
      List.iter l ~f:(fun (_, s) ->
        if String.sub s ~pos:0 ~len:indent_len <> indent then
          failwith "Inconsistent indentation. Try checking tabs and spaces?");
      indent

  let process_lines lines =
    let indent = determine_indent lines in
    let indent_len = String.length indent in
    let unindent = function
      | "" -> ""
      | s  -> String.sub s ~pos:indent_len ~len:(String.length s - indent_len)
    in
    let lines = List.map lines ~f:snd |> List.map ~f:unindent in
    (indent, lines)

  type raw_pretty =
    { leader  : string
    ; trailer : string
    ; indent  : string
    ; lines   : string list
    }

# 48 "lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base = 
   "\000\000\251\255\001\000\002\000\004\000\003\000\006\000\005\000\
    \007\000\008\000\009\000\011\000\012\000\018\000\255\255\014\000\
    \015\000\016\000\019\000\023\000\020\000\025\000\254\255\022\000\
    \026\000\027\000\028\000\029\000\063\000\253\255\054\000\061\000\
    \076\000\067\000\252\255\065\000\254\255\255\255\010\000\253\255\
    \082\000\253\255\013\000\255\255\120\000\252\255\254\255\017\000\
    \253\255\254\255\069\000\255\255\098\000\021\000\254\255\255\255\
    ";
  Lexing.lex_backtrk = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\001\000\255\255\255\255\255\255\255\255\255\255\
    ";
  Lexing.lex_default = 
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\038\000\000\000\000\000\038\000\000\000\
    \042\000\000\000\042\000\000\000\042\000\000\000\000\000\049\000\
    \000\000\000\000\255\255\000\000\255\255\053\000\000\000\000\000\
    ";
  Lexing.lex_trans = 
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\037\000\255\255\255\255\045\000\
    \255\255\255\255\255\255\013\000\255\255\255\255\255\255\054\000\
    \255\255\255\255\021\000\255\255\255\255\255\255\255\255\255\255\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\013\000\002\000\002\000\013\000\002\000\002\000\
    \002\000\021\000\002\000\002\000\002\000\021\000\002\000\002\000\
    \255\255\002\000\002\000\002\000\002\000\002\000\028\000\255\255\
    \028\000\255\255\035\000\037\000\033\000\255\255\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\255\255\000\000\
    \000\000\000\000\000\000\044\000\041\000\000\000\002\000\028\000\
    \000\000\035\000\000\000\033\000\000\000\002\000\005\000\002\000\
    \003\000\023\000\011\000\002\000\009\000\006\000\030\000\007\000\
    \017\000\016\000\044\000\004\000\002\000\033\000\015\000\012\000\
    \019\000\008\000\010\000\020\000\000\000\024\000\000\000\025\000\
    \018\000\044\000\045\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\027\000\050\000\000\000\000\000\
    \000\000\000\000\000\000\026\000\000\000\000\000\000\000\000\000\
    \044\000\000\000\000\000\000\000\000\000\000\000\000\000\032\000\
    \000\000\000\000\000\000\000\000\052\000\031\000\052\000\052\000\
    \052\000\052\000\052\000\052\000\052\000\052\000\052\000\052\000\
    \052\000\052\000\052\000\052\000\052\000\052\000\052\000\052\000\
    \052\000\052\000\052\000\052\000\052\000\052\000\052\000\052\000\
    \000\000\052\000\051\000\052\000\052\000\052\000\052\000\052\000\
    \052\000\052\000\052\000\052\000\052\000\052\000\052\000\052\000\
    \052\000\052\000\052\000\052\000\052\000\052\000\052\000\052\000\
    \052\000\052\000\052\000\052\000\052\000\000\000\000\000\051\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
    \001\000\001\000\039\000\001\000\001\000\046\000\001\000\001\000\
    \001\000\048\000\014\000\001\000\001\000\055\000\001\000\001\000\
    \000\000\022\000\001\000\001\000\001\000\001\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\001\000\000\000\029\000\
    \000\000\036\000\000\000\034\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\
    \000\000\000\000\043\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \043\000";
  Lexing.lex_check = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\000\000\002\000\003\000\005\000\004\000\007\000\
    \006\000\008\000\009\000\010\000\038\000\011\000\012\000\042\000\
    \015\000\016\000\017\000\013\000\013\000\018\000\020\000\053\000\
    \023\000\019\000\021\000\021\000\024\000\025\000\026\000\027\000\
    \000\000\002\000\003\000\005\000\004\000\007\000\006\000\008\000\
    \009\000\010\000\013\000\011\000\012\000\012\000\015\000\016\000\
    \017\000\021\000\013\000\018\000\020\000\020\000\023\000\019\000\
    \030\000\021\000\024\000\025\000\026\000\027\000\027\000\031\000\
    \028\000\028\000\035\000\035\000\033\000\033\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\032\000\255\255\
    \255\255\255\255\255\255\040\000\040\000\255\255\030\000\028\000\
    \255\255\035\000\255\255\033\000\255\255\031\000\002\000\028\000\
    \002\000\004\000\010\000\033\000\008\000\002\000\003\000\006\000\
    \016\000\015\000\040\000\002\000\032\000\032\000\005\000\011\000\
    \018\000\007\000\009\000\019\000\255\255\023\000\255\255\024\000\
    \017\000\044\000\044\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\026\000\047\000\255\255\255\255\
    \255\255\255\255\255\255\025\000\255\255\255\255\255\255\255\255\
    \044\000\255\255\255\255\255\255\255\255\255\255\255\255\031\000\
    \255\255\255\255\255\255\255\255\050\000\030\000\050\000\050\000\
    \050\000\050\000\050\000\050\000\050\000\050\000\050\000\050\000\
    \050\000\050\000\050\000\050\000\050\000\050\000\050\000\050\000\
    \050\000\050\000\050\000\050\000\050\000\050\000\050\000\050\000\
    \255\255\052\000\050\000\052\000\052\000\052\000\052\000\052\000\
    \052\000\052\000\052\000\052\000\052\000\052\000\052\000\052\000\
    \052\000\052\000\052\000\052\000\052\000\052\000\052\000\052\000\
    \052\000\052\000\052\000\052\000\052\000\255\255\255\255\052\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\002\000\003\000\005\000\004\000\007\000\006\000\008\000\
    \009\000\010\000\038\000\011\000\012\000\042\000\015\000\016\000\
    \017\000\047\000\013\000\018\000\020\000\053\000\023\000\019\000\
    \255\255\021\000\024\000\025\000\026\000\027\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\030\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\031\000\255\255\028\000\
    \255\255\035\000\255\255\033\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\032\000\255\255\255\255\255\255\
    \255\255\255\255\040\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \044\000";
  Lexing.lex_base_code = 
   "\000\000\023\000\002\000\004\000\006\000\009\000\013\000\011\000\
    \016\000\018\000\045\000\020\000\052\000\054\000\162\000\056\000\
    \059\000\066\000\069\000\104\000\111\000\113\000\165\000\125\000\
    \128\000\131\000\137\000\140\000\152\000\168\000\157\000\166\000\
    \173\000\176\000\171\000\063\000\000\000\165\000\072\000\184\000\
    \116\000\000\000\164\000\000\000\178\000\171\000\199\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    ";
  Lexing.lex_backtrk_code = 
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    ";
  Lexing.lex_default_code = 
   "\001\000\000\000\001\000\001\000\001\000\001\000\001\000\001\000\
    \001\000\001\000\001\000\001\000\001\000\001\000\000\000\001\000\
    \001\000\001\000\001\000\001\000\001\000\001\000\000\000\001\000\
    \001\000\001\000\001\000\001\000\001\000\000\000\001\000\001\000\
    \001\000\001\000\000\000\174\000\000\000\000\000\174\000\000\000\
    \189\000\000\000\189\000\000\000\189\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    ";
  Lexing.lex_trans_code = 
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\026\000\000\000\098\000\000\000\114\000\
    \000\000\000\000\130\000\000\000\146\000\000\000\146\000\000\000\
    \000\000\146\000\000\000\146\000\000\000\146\000\000\000\000\000\
    \000\000\000\000\026\000\000\000\098\000\000\000\114\000\000\000\
    \012\000\130\000\035\000\146\000\101\000\146\000\117\000\000\000\
    \146\000\133\000\146\000\149\000\146\000\149\000\146\000\000\000\
    \149\000\000\000\149\000\000\000\149\000\146\000\000\000\000\000\
    \000\000\130\000\000\000\000\000\130\000\000\000\000\000\000\000\
    \177\000\000\000\000\000\130\000\000\000\146\000\130\000\000\000\
    \000\000\000\000\000\000\000\000\146\000\149\000\000\000\000\000\
    \130\000\000\000\000\000\130\000\149\000\076\000\149\000\177\000\
    \133\000\000\000\130\000\133\000\000\000\130\000\000\000\054\000\
    \000\000\065\000\133\000\087\000\000\000\133\000\076\000\000\000\
    \065\000\130\000\000\000\000\000\087\000\076\000\076\000\000\000\
    \130\000\000\000\000\000\000\000\054\000\177\000\000\000\076\000\
    \076\000\000\000\000\000\000\000\076\000\000\000\114\000\000\000\
    \130\000\114\000\000\000\000\000\114\000\000\000\076\000\130\000\
    \133\000\000\000\114\000\000\000\177\000\114\000\000\000\133\000\
    \054\000\133\000\000\000\054\000\054\000\114\000\000\000\000\000\
    \114\000\000\000\000\000\114\000\000\000\117\000\098\000\000\000\
    \117\000\114\000\054\000\117\000\114\000\000\000\000\000\098\000\
    \000\000\117\000\054\000\000\000\117\000\087\000\098\000\000\000\
    \000\000\000\000\000\000\192\000\000\000\098\000\000\000\000\000\
    \117\000\000\000\000\000\000\000\000\000\101\000\098\000\000\000\
    \000\000\000\000\000\000\000\000\054\000\098\000\101\000\000\000\
    \000\000\000\000\192\000\000\000\000\000\101\000\065\000\000\000\
    \101\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\087\000\087\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\087\000\000\000\087\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \065\000\000\000\000\000\000\000\065\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000";
  Lexing.lex_check_code = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\002\000\002\000\003\000\003\000\004\000\
    \004\000\255\255\005\000\005\000\007\000\007\000\006\000\006\000\
    \255\255\008\000\008\000\009\000\009\000\011\000\011\000\255\255\
    \000\000\255\255\002\000\255\255\003\000\255\255\004\000\255\255\
    \000\000\005\000\002\000\007\000\003\000\006\000\004\000\255\255\
    \008\000\005\000\009\000\007\000\011\000\006\000\010\000\010\000\
    \008\000\255\255\009\000\255\255\011\000\012\000\012\000\013\000\
    \013\000\015\000\015\000\255\255\016\000\016\000\255\255\255\255\
    \035\000\035\000\255\255\017\000\017\000\010\000\018\000\018\000\
    \255\255\038\000\038\000\255\255\012\000\010\000\013\000\255\255\
    \015\000\255\255\255\255\016\000\012\000\012\000\013\000\035\000\
    \015\000\255\255\017\000\016\000\255\255\018\000\255\255\002\000\
    \038\000\002\000\017\000\004\000\255\255\018\000\002\000\255\255\
    \003\000\019\000\019\000\255\255\002\000\008\000\006\000\255\255\
    \020\000\020\000\021\000\021\000\005\000\040\000\040\000\007\000\
    \011\000\255\255\255\255\255\255\009\000\255\255\023\000\023\000\
    \019\000\024\000\024\000\255\255\025\000\025\000\010\000\020\000\
    \019\000\021\000\026\000\026\000\040\000\027\000\027\000\020\000\
    \020\000\021\000\255\255\015\000\016\000\023\000\255\255\255\255\
    \024\000\028\000\028\000\025\000\255\255\023\000\030\000\030\000\
    \024\000\026\000\018\000\025\000\027\000\042\000\042\000\031\000\
    \031\000\026\000\017\000\255\255\027\000\027\000\032\000\032\000\
    \028\000\033\000\033\000\044\000\044\000\030\000\255\255\255\255\
    \028\000\255\255\255\255\255\255\042\000\030\000\031\000\255\255\
    \255\255\255\255\255\255\255\255\019\000\032\000\031\000\255\255\
    \033\000\255\255\044\000\255\255\255\255\032\000\032\000\255\255\
    \033\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\023\000\024\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\026\000\255\255\025\000\255\255\255\255\255\255\255\255\
    \000\000\255\255\002\000\255\255\003\000\255\255\004\000\255\255\
    \031\000\005\000\255\255\007\000\030\000\006\000\255\255\255\255\
    \008\000\255\255\009\000\255\255\011\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\010\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\012\000\255\255\013\000\255\255\
    \015\000\255\255\255\255\016\000\255\255\255\255\255\255\035\000\
    \255\255\255\255\017\000\255\255\255\255\018\000\255\255\255\255\
    \038\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \019\000\255\255\255\255\255\255\255\255\255\255\255\255\020\000\
    \255\255\021\000\255\255\255\255\040\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\023\000\255\255\255\255\
    \024\000\255\255\255\255\025\000\255\255\255\255\255\255\255\255\
    \255\255\026\000\255\255\255\255\027\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \028\000\255\255\255\255\255\255\255\255\030\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\042\000\255\255\031\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\032\000\255\255\255\255\
    \033\000\255\255\044\000";
  Lexing.lex_code = 
   "\255\005\255\004\255\003\255\002\255\001\255\255\009\255\008\255\
    \007\255\006\255\005\255\255\000\005\255\004\009\003\008\002\007\
    \001\006\255\004\009\003\008\002\007\001\006\005\255\009\255\008\
    \255\007\255\006\255\255\007\255\005\255\004\255\003\255\001\255\
    \255\009\255\005\255\003\255\002\255\001\255\255\006\255\005\255\
    \004\255\003\255\002\255\255\008\255\005\255\004\255\002\255\001\
    \255\255\004\009\255\004\009\005\255\009\255\008\255\007\255\006\
    \255\255\003\008\255\003\008\005\255\009\255\008\255\007\255\006\
    \255\255\002\007\255\002\007\005\255\009\255\008\255\007\255\006\
    \255\255\001\006\255\001\006\005\255\009\255\008\255\007\255\006\
    \255\255\000\001\255\000\002\255\000\003\255\000\004\255\004\255\
    \255\004\255\003\255\002\255\255\001\004\000\003\255\003\255\255\
    \003\255\004\255\002\255\255\001\003\000\002\255";
}

let rec line lexbuf =
  lexbuf.Lexing.lex_mem <- Array.make 10 (-1) ; (* L=5 [5] <- p ; [4] <- p ; [3] <- p ; [2] <- p ; [1] <- p ;  *)
  lexbuf.Lexing.lex_mem.(5) <- lexbuf.Lexing.lex_curr_pos ;
  lexbuf.Lexing.lex_mem.(4) <- lexbuf.Lexing.lex_curr_pos ;
  lexbuf.Lexing.lex_mem.(3) <- lexbuf.Lexing.lex_curr_pos ;
  lexbuf.Lexing.lex_mem.(2) <- lexbuf.Lexing.lex_curr_pos ;
  lexbuf.Lexing.lex_mem.(1) <- lexbuf.Lexing.lex_curr_pos ;
  __ocaml_lex_line_rec lexbuf 0
and __ocaml_lex_line_rec lexbuf __ocaml_lex_state =
  match Lexing.new_engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
let
# 52 "lexer.mll"
                     s
# 344 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_mem.(0)
and
# 52 "lexer.mll"
                                                    all
# 349 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 52 "lexer.mll"
                                                            ( make_line all (Literal s) )
# 353 "lexer.ml"

  | 1 ->
let
# 53 "lexer.mll"
                     s
# 359 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_mem.(0)
and
# 53 "lexer.mll"
                                                    all
# 364 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 53 "lexer.mll"
                                                            ( make_line all (escaped s) )
# 368 "lexer.ml"

  | 2 ->
let
# 54 "lexer.mll"
                     s
# 374 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_mem.(0)
and
# 54 "lexer.mll"
                                                    all
# 379 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 54 "lexer.mll"
                                                            ( make_line all (Regexp  s) )
# 383 "lexer.ml"

  | 3 ->
let
# 55 "lexer.mll"
                     s
# 389 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_mem.(0)
and
# 55 "lexer.mll"
                                                    all
# 394 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 55 "lexer.mll"
                                                            ( make_line all (Glob    s) )
# 398 "lexer.ml"

  | 4 ->
let
# 56 "lexer.mll"
                     s
# 404 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_mem.(0)
and
# 56 "lexer.mll"
                                                    all
# 409 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 56 "lexer.mll"
                                                            ( make_line all (Literal s) )
# 413 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_line_rec lexbuf __ocaml_lex_state

and split_and_process_lines acc lexbuf =
  lexbuf.Lexing.lex_mem <- Array.make 5 (-1) ; (* L=3 [4] <- p ; [3] <- p ; [2] <- p ;  *)
  lexbuf.Lexing.lex_mem.(4) <- lexbuf.Lexing.lex_curr_pos ;
  lexbuf.Lexing.lex_mem.(3) <- lexbuf.Lexing.lex_curr_pos ;
  lexbuf.Lexing.lex_mem.(2) <- lexbuf.Lexing.lex_curr_pos ;
  __ocaml_lex_split_and_process_lines_rec acc lexbuf 35
and __ocaml_lex_split_and_process_lines_rec acc lexbuf __ocaml_lex_state =
  match Lexing.new_engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
let
# 59 "lexer.mll"
              indent
# 430 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_mem.(0)
and
# 59 "lexer.mll"
                                             line
# 435 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos (lexbuf.Lexing.lex_curr_pos + -1) in
# 60 "lexer.mll"
    ( split_and_process_lines ((String.length indent, line) :: acc) lexbuf )
# 439 "lexer.ml"

  | 1 ->
let
# 62 "lexer.mll"
              trailer
# 445 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 63 "lexer.mll"
    ( (trailer, process_lines (List.rev ((0, "") :: acc))) )
# 449 "lexer.ml"

  | 2 ->
let
# 64 "lexer.mll"
              indent
# 455 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_mem.(0)
and
# 64 "lexer.mll"
                                      line
# 460 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_mem.(1)
and
# 64 "lexer.mll"
                                                      trailer
# 465 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_mem.(1) lexbuf.Lexing.lex_curr_pos in
# 65 "lexer.mll"
    ( (trailer, process_lines (List.rev ((String.length indent, line) :: acc))) )
# 469 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_split_and_process_lines_rec acc lexbuf __ocaml_lex_state

and raw_pretty lexbuf =
  lexbuf.Lexing.lex_mem <- Array.make 5 (-1) ; (* L=3 [4] <- p ; [3] <- p ; [2] <- p ;  *)
  lexbuf.Lexing.lex_mem.(4) <- lexbuf.Lexing.lex_curr_pos ;
  lexbuf.Lexing.lex_mem.(3) <- lexbuf.Lexing.lex_curr_pos ;
  lexbuf.Lexing.lex_mem.(2) <- lexbuf.Lexing.lex_curr_pos ;
  __ocaml_lex_raw_pretty_rec lexbuf 40
and __ocaml_lex_raw_pretty_rec lexbuf __ocaml_lex_state =
  match Lexing.new_engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
let
# 68 "lexer.mll"
              s
# 486 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 69 "lexer.mll"
    ( { leader = ""; trailer = ""; indent = ""; lines = [s] } )
# 490 "lexer.ml"

  | 1 ->
let
# 70 "lexer.mll"
               leader
# 496 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_mem.(0)
and
# 70 "lexer.mll"
                                         s
# 501 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_mem.(0) lexbuf.Lexing.lex_mem.(1)
and
# 70 "lexer.mll"
                                                       trailer
# 506 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_mem.(1) lexbuf.Lexing.lex_curr_pos in
# 71 "lexer.mll"
    ( { leader; trailer; indent = ""; lines = [s] } )
# 510 "lexer.ml"

  | 2 ->
# 73 "lexer.mll"
    ( let trailer, (indent, lines) = split_and_process_lines [] lexbuf in
      { leader = "\n"; trailer; indent; lines } )
# 516 "lexer.ml"

  | 3 ->
let
# 75 "lexer.mll"
               leader
# 522 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_mem.(0)
and
# 75 "lexer.mll"
                                    first
# 527 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_mem.(0) (lexbuf.Lexing.lex_curr_pos + -1) in
# 76 "lexer.mll"
    ( let trailer, (indent, lines) = split_and_process_lines [] lexbuf in
      { leader; trailer; indent; lines = first :: lines } )
# 532 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_raw_pretty_rec lexbuf __ocaml_lex_state

and quoted_string_terminators acc lexbuf =
    __ocaml_lex_quoted_string_terminators_rec acc lexbuf 47
and __ocaml_lex_quoted_string_terminators_rec acc lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
let
# 80 "lexer.mll"
                       s
# 545 "lexer.ml"
= Lexing.sub_lexeme lexbuf (lexbuf.Lexing.lex_start_pos + 1) (lexbuf.Lexing.lex_curr_pos + -1) in
# 80 "lexer.mll"
                              ( quoted_string_terminators (s :: acc) lexbuf )
# 549 "lexer.ml"

  | 1 ->
# 81 "lexer.mll"
                              ( quoted_string_terminators       acc  lexbuf )
# 554 "lexer.ml"

  | 2 ->
# 82 "lexer.mll"
                              ( acc )
# 559 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_quoted_string_terminators_rec acc lexbuf __ocaml_lex_state

and split_lines lexbuf =
    __ocaml_lex_split_lines_rec lexbuf 53
and __ocaml_lex_split_lines_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
let
# 85 "lexer.mll"
                s
# 572 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 85 "lexer.mll"
                       ( s :: []                 )
# 576 "lexer.ml"

  | 1 ->
let
# 86 "lexer.mll"
                s
# 582 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos (lexbuf.Lexing.lex_curr_pos + -1) in
# 86 "lexer.mll"
                       ( s :: split_lines lexbuf )
# 586 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_split_lines_rec lexbuf __ocaml_lex_state

;;

# 88 "lexer.mll"
 
  let parse_pretty_line s = line (Lexing.from_string s)

  let parse_pretty s =
    let { leader; trailer; indent; lines } = raw_pretty (Lexing.from_string s) in
    let res : Pretty.t =
      { leader
      ; trailer
      ; indent
      ; lines = List.map lines ~f:parse_pretty_line
      }
    in
    [%test_result: string] (Pretty.to_string res) ~expect:s;
    res

  let parse_body s ~(kind : Body.kind) : Body.t =
    match kind with
    | Exact  -> Exact s
    | Pretty -> Pretty (parse_pretty s)

  let extract_quoted_string_terminators s =
    quoted_string_terminators [] (Lexing.from_string s)

  let split_lines s = split_lines (Lexing.from_string s)

# 619 "lexer.ml"
